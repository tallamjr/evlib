name: Release

on:
  workflow_run:
    workflows: ["Tag Version"]
    types:
      - completed
    branches: [main, master]

permissions:
  contents: write
  id-token: write

jobs:
  publish-crate:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-publish-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-publish-

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu # ,aarch64-unknown-linux-gnu,aarch64-apple-darwin,x86_64-apple-darwin

      # - name: Install dependencies
      #   run: |
      #     brew update
      #     brew install hdf5@1.10 pkg-config zig
      #     H5P=$(brew --prefix hdf5@1.10)
      #     echo "HDF5_DIR=${H5P}"       >> $GITHUB_ENV
      #     echo "HDF5_ROOT=${H5P}"      >> $GITHUB_ENV
      #     echo "PKG_CONFIG_PATH=${H5P}/lib/pkgconfig:${PKG_CONFIG_PATH}" >> $GITHUB_ENV
      #     echo "ZIG_GLOBAL_CACHE_DIR=$HOME/.zig-cache" >> $GITHUB_ENV
      #
      # - name: Verify targets
      #   run: rustup target list --installed
      #
      # - name: Set up Docker
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y docker.io
      #     sudo systemctl start docker
      #     sudo systemctl enable docker
      #     docker --version
      #
      # - name: Build for all targets
      #   run: |
      #     cargo install cross --git https://github.com/cross-rs/cross
      #     cross build --target x86_64-unknown-linux-gnu --all-features
      #     cross build --target aarch64-unknown-linux-gnu --all-features
      #     cross build --target aarch64-apple-darwin --all-features
      #     cross build --target x86_64-apple-darwin --all-features

      - name: Publish to crates.io
        run: cargo publish --all-features --allow-dirty
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_API_TOKEN }}

  build-wheels:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: macOS - ${{ matrix.target.name }} - Py${{ matrix.python-version }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        target:
          # Linux x86_64 (via Zig)
          - name: x86_64-linux-gnu
            rust_target: x86_64-unknown-linux-gnu
            platform: linux-x86_64
            build_args: "--release --target x86_64-unknown-linux-gnu --manylinux 2014 --zig"

          # # Linux aarch64 (via Zig)
          # - name: aarch64-linux-gnu
          #   rust_target: aarch64-unknown-linux-gnu
          #   platform: linux-aarch64
          #   build_args: "--release --target aarch64-unknown-linux-gnu --manylinux 2014 --zig"
          #
          # macOS universal2 (arm64 + x86_64)
          # - name: universal2
          #   rust_target: aarch64-apple-darwin,x86_64-apple-darwin
          #   platform: macos-universal2
          #   build_args: "--release --target universal2-apple-darwin --zig"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target.name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target.name }}-

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target.rust_target }}

      - name: Install dependencies
        run: |
          brew update
          brew install cmake
          brew install hdf5@1.10
          brew install pkgconf
          brew install zig
          H5P=$(brew --prefix hdf5@1.10)
          echo "HDF5_DIR=${H5P}" >> $GITHUB_ENV
          echo "HDF5_ROOT=${H5P}" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=${H5P}/lib/pkgconfig:${PKG_CONFIG_PATH}" >> $GITHUB_ENV
          echo "ZIG_GLOBAL_CACHE_DIR=$HOME/.zig-cache" >> $GITHUB_ENV

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install build tools
        run: |
          pip install --upgrade pip
          pip install uv
          uv venv
          source .venv/bin/activate
          uv pip install "maturin[zig]>=1.4.0"
          maturin --version

      # Build wheels
      - name: Build wheels
        run: |
          source .venv/bin/activate
          maturin build ${{ matrix.target.build_args }} --interpreter python${{ matrix.python-version }}

      # Upload wheels
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.target.platform }}-python${{ matrix.python-version }}
          path: target/wheels/*.whl

  publish-wheels:
    needs: [build-wheels]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: target/wheels
          merge-multiple: true

      - name: List wheels for debugging
        run: find target/wheels -name "*.whl"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: target/wheels
          password: ${{ secrets.PYPI_API_TOKEN }}
