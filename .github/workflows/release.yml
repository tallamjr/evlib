name: Release

on:
  workflow_run:
    workflows: ["Tag Version"]
    types:
      - completed
    branches: [main, master]

permissions:
  contents: write
  id-token: write

jobs:
  publish-crate:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libhdf5-dev pkg-config

      - name: Publish to crates.io
        run: cargo publish --allow-dirty
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_API_TOKEN }}

  build-wheels:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: ${{ matrix.os }} - ${{ matrix.target }} - Py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux-x86_64
            install_deps: sudo apt-get update && sudo apt-get install -y libhdf5-dev pkg-config
            build_args: --release --target x86_64-unknown-linux-gnu
            post_build: |
              for whl in target/wheels/*.whl; do
                if [[ "$whl" != *manylinux* ]]; then
                  auditwheel repair "$whl" --plat manylinux2014_x86_64 -w target/wheels/
                  rm "$whl"
                fi
              done
            install_auditwheel: python -m pip install auditwheel

          # Linux aarch64 (via Zig)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux-aarch64
            install_deps: |
              sudo dpkg --add-architecture arm64
              sudo apt-get update
              sudo apt-get install -y libhdf5-dev pkg-config libhdf5-dev:arm64
            build_args: --release --target aarch64-unknown-linux-gnu --zig
            maturin_extra: pip install "maturin[zig]"

          # macOS universal2
          - os: macos-latest
            target: universal2
            platform: macos-universal2
            install_deps: |
              brew update
              brew install hdf5@1.10 pkg-config
              H5P=$(brew --prefix hdf5@1.10)
              echo "HDF5_DIR=${H5P}" >> $GITHUB_ENV
              echo "HDF5_ROOT=${H5P}" >> $GITHUB_ENV
              echo "PKG_CONFIG_PATH=${H5P}/lib/pkgconfig:${PKG_CONFIG_PATH}" >> $GITHUB_ENV
            build_args: --release --universal2
            rust_targets: aarch64-apple-darwin,x86_64-apple-darwin

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install Rust with appropriate targets
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_targets || matrix.target }}

      # Install system dependencies
      - name: Install dependencies
        run: ${{ matrix.install_deps }}

      # Setup Python
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Install maturin and auditwheel if needed
      - name: Install build tools
        run: |
          pip install uv
          uv venv
          source .venv/bin/activate
          uv pip install maturin
          ${{ matrix.maturin_extra }}
          ${{ matrix.install_auditwheel }}

      # Build wheels
      - name: Build wheels
        run: |
          source .venv/bin/activate
          maturin build ${{ matrix.build_args }} -i python${{ matrix.python-version }}
          ${{ matrix.post_build }}

      # Upload wheels
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform }}-python${{ matrix.python-version }}
          path: target/wheels/*.whl

  publish-wheels:
    needs: [build-wheels]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: target/wheels
          merge-multiple: true

      - name: List wheels for debugging
        run: find target/wheels -name "*.whl"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: target/wheels
          password: ${{ secrets.PYPI_API_TOKEN }}
